/*
 * Copyright (C) 2011 NATSRL @ UMD (University Minnesota Duluth) and
 * Software and System Laboratory @ KNU (Kangwon National University, Korea) 
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package edu.umn.natsrl.infra.section;

import edu.umn.natsrl.infra.InfraObject;
import edu.umn.natsrl.infra.TMO;
import edu.umn.natsrl.infra.infraobjects.Corridor;
import edu.umn.natsrl.infra.infraobjects.Detector;
import edu.umn.natsrl.infra.infraobjects.RNode;
import edu.umn.natsrl.infra.types.DetectorType;
import edu.umn.natsrl.infra.types.InfraType;
import edu.umn.natsrl.infra.types.LaneType;
import edu.umn.natsrl.infra.types.StationType;
import edu.umn.natsrl.map.InfraPoint;
import edu.umn.natsrl.util.StringUtil;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import org.w3c.dom.Element;

/**
 *
 * @author Soobin Jeon <j.soobin@gmail.com>
 */
public class SectionInfraCreatorDialog extends javax.swing.JDialog {
    final String RND_NAME = "rnd_999";
    TMO tmo = TMO.getInstance();
    InfraObject cobj;
    RNode rNode;
    Corridor selectedCorridor;
    boolean isNewNode = false;
    
    public static interface InfraDialogChanged{
        public void infrachanged();
    }
    
    private InfraDialogChanged changeListener;
    /**
     * Creates new form SectionInfraCreatorDialog
     */
    public SectionInfraCreatorDialog(InfraObject obj,Corridor cor,int ea, int nor, java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initSetup();
        setEscape();
        this.setLocationRelativeTo(parent);
        cobj = obj;
        selectedCorridor = cor;
        loadInfraType();
        loadCorridor();
        if(cobj != null && loadObject(cobj))
            loadRNode();
        else{
            isNewNode = true;
            loadObject(ea,nor,cor);
        }
    }
    
    private void setEscape() {
        KeyStroke escape = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0, false);
        Action escapeAction = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                dispose();
            }
        };
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(escape, "ESCAPE");
        getRootPane().getActionMap().put("ESCAPE", escapeAction);        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                popupmenu = new javax.swing.JPopupMenu();
                AddDetector = new javax.swing.JMenuItem();
                DeleteDetector = new javax.swing.JMenuItem();
                jPanel1 = new javax.swing.JPanel();
                jPanel4 = new javax.swing.JPanel();
                tbx_id = new javax.swing.JTextField();
                jLabel1 = new javax.swing.JLabel();
                jLabel2 = new javax.swing.JLabel();
                jLabel3 = new javax.swing.JLabel();
                jLabel4 = new javax.swing.JLabel();
                jLabel5 = new javax.swing.JLabel();
                jLabel6 = new javax.swing.JLabel();
                jLabel7 = new javax.swing.JLabel();
                cbxType = new javax.swing.JComboBox();
                cbxCorridor = new javax.swing.JComboBox();
                tbxLabel = new javax.swing.JTextField();
                tbxLane = new javax.swing.JTextField();
                tbxEasting = new javax.swing.JTextField();
                tbxNorthing = new javax.swing.JTextField();
                tbxRNode = new javax.swing.JTextField();
                jLabel8 = new javax.swing.JLabel();
                jPanel2 = new javax.swing.JPanel();
                jScrollPane1 = new javax.swing.JScrollPane();
                tblDetectors = new javax.swing.JTable();
                btnDelete = new javax.swing.JButton();
                btnSave = new javax.swing.JButton();
                btnClose = new javax.swing.JButton();

                AddDetector.setText("Add Detector");
                AddDetector.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                AddDetectorActionPerformed(evt);
                        }
                });
                popupmenu.add(AddDetector);

                DeleteDetector.setText("Delete Detector");
                DeleteDetector.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                DeleteDetectorActionPerformed(evt);
                        }
                });
                popupmenu.add(DeleteDetector);

                setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
                setResizable(false);

                jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Info"));

                tbx_id.setPreferredSize(new java.awt.Dimension(100, 20));
                tbx_id.addFocusListener(new java.awt.event.FocusAdapter() {
                        public void focusLost(java.awt.event.FocusEvent evt) {
                                tbx_idFocusLost(evt);
                        }
                });

                jLabel1.setText("ID");

                jLabel2.setText("Type");

                jLabel3.setText("Corridor");

                jLabel4.setText("Label");

                jLabel5.setText("Lanes");

                jLabel6.setText("Easting");

                jLabel7.setText("Northing");

                cbxType.setPreferredSize(new java.awt.Dimension(100, 20));
                cbxType.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                cbxTypeActionPerformed(evt);
                        }
                });

                cbxCorridor.setEnabled(false);
                cbxCorridor.setPreferredSize(new java.awt.Dimension(100, 20));

                tbxLabel.setPreferredSize(new java.awt.Dimension(100, 20));

                tbxLane.setEnabled(false);
                tbxLane.setPreferredSize(new java.awt.Dimension(100, 20));

                tbxEasting.setEnabled(false);
                tbxEasting.setPreferredSize(new java.awt.Dimension(100, 20));

                tbxNorthing.setEnabled(false);
                tbxNorthing.setPreferredSize(new java.awt.Dimension(100, 20));

                tbxRNode.setPreferredSize(new java.awt.Dimension(100, 20));

                jLabel8.setText("RNode");

                javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
                jPanel4.setLayout(jPanel4Layout);
                jPanel4Layout.setHorizontalGroup(
                        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cbxType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cbxCorridor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tbxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tbxLane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tbxNorthing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tbxEasting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jLabel1)
                                                        .addComponent(jLabel8))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(tbxRNode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(tbx_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap())
                );
                jPanel4Layout.setVerticalGroup(
                        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tbxRNode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tbx_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(cbxType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(cbxCorridor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tbxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tbxLane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tbxEasting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tbxNorthing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel7))
                                .addContainerGap())
                );

                javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
                jPanel1.setLayout(jPanel1Layout);
                jPanel1Layout.setHorizontalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                );
                jPanel1Layout.setVerticalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                );

                jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Detectors"));

                tblDetectors.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {

                        },
                        new String [] {
                                "Lane", "ID", "TYPE"
                        }
                ));
                tblDetectors.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseReleased(java.awt.event.MouseEvent evt) {
                                tblDetectorsMouseReleased(evt);
                        }
                });
                tblDetectors.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                        public void propertyChange(java.beans.PropertyChangeEvent evt) {
                                tblDetectorsPropertyChange(evt);
                        }
                });
                jScrollPane1.setViewportView(tblDetectors);

                javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
                jPanel2.setLayout(jPanel2Layout);
                jPanel2Layout.setHorizontalGroup(
                        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );
                jPanel2Layout.setVerticalGroup(
                        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                                .addContainerGap())
                );

                btnDelete.setText("Delete");
                btnDelete.setToolTipText("");
                btnDelete.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnDeleteActionPerformed(evt);
                        }
                });

                btnSave.setText("Save");
                btnSave.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnSaveActionPerformed(evt);
                        }
                });

                btnClose.setText("Close");
                btnClose.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnCloseActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(15, Short.MAX_VALUE))
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                                        .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnClose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(6, 6, 6))
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if(!CheckState()){
            return;
        }
        tbx_id.setFocusable(true);
        if(isNewNode)
            setNode();
        else
            updateNode(cobj);
        tmo.getInfra().reflash(selectedCorridor);
        changeListener.infrachanged();
        dispose();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        deleteStation();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblDetectorsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetectorsMouseReleased
        // TODO add your handling code here:
        if(evt.getButton() == MouseEvent.BUTTON3){
            popupmenu.show(tblDetectors, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tblDetectorsMouseReleased

    private void AddDetectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddDetectorActionPerformed
        // TODO add your handling code here:
        addTableRow(tblDetectors,1);
    }//GEN-LAST:event_AddDetectorActionPerformed

    private void DeleteDetectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteDetectorActionPerformed
        // TODO add your handling code here:
        deleteTable(tblDetectors);
        isDetectorSheetUpdate();
    }//GEN-LAST:event_DeleteDetectorActionPerformed

    private void tblDetectorsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblDetectorsPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_tblDetectorsPropertyChange

    private void tbx_idFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tbx_idFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_tbx_idFocusLost

    private void cbxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxTypeActionPerformed
        // TODO add your handling code here:
        TypeChanged();
    }//GEN-LAST:event_cbxTypeActionPerformed

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JMenuItem AddDetector;
        private javax.swing.JMenuItem DeleteDetector;
        private javax.swing.JButton btnClose;
        private javax.swing.JButton btnDelete;
        private javax.swing.JButton btnSave;
        private javax.swing.JComboBox cbxCorridor;
        private javax.swing.JComboBox cbxType;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabel2;
        private javax.swing.JLabel jLabel3;
        private javax.swing.JLabel jLabel4;
        private javax.swing.JLabel jLabel5;
        private javax.swing.JLabel jLabel6;
        private javax.swing.JLabel jLabel7;
        private javax.swing.JLabel jLabel8;
        private javax.swing.JPanel jPanel1;
        private javax.swing.JPanel jPanel2;
        private javax.swing.JPanel jPanel4;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JPopupMenu popupmenu;
        private javax.swing.JTable tblDetectors;
        private javax.swing.JTextField tbxEasting;
        private javax.swing.JTextField tbxLabel;
        private javax.swing.JTextField tbxLane;
        private javax.swing.JTextField tbxNorthing;
        private javax.swing.JTextField tbxRNode;
        private javax.swing.JTextField tbx_id;
        // End of variables declaration//GEN-END:variables

    private void initSetup() {
        /**
         * init Table
         */
        tblDetectors.getModel().addTableModelListener(new TableModelListener(){
            @Override
            public void tableChanged(TableModelEvent e) {
                if(tblDetectors.isEditing()){
                        if(e.getColumn() == 1)
                                isDetectorSheetUpdate();
                }
            }
            
        });
    }
    
    private boolean loadObject(InfraObject cobj1) {
        if(cobj.getInfraType().isRnode()){
            rNode = (RNode) cobj;
            return true;
        }else
            return false;
    }
    
    private void loadObject(int ea, int nor, Corridor cor) {
        this.tbxEasting.setText(String.valueOf(ea));
        this.tbxNorthing.setText(String.valueOf(nor));
        selectCorridor(cor);
        loadDetector(null);
    }

    private void loadRNode() {
        this.tbxRNode.setText(adjustIds(rNode.getId()));
        if(rNode.isStation())
            this.tbx_id.setText(adjustIds(rNode.getStationId()));
        this.tbxLabel.setText(rNode.getLabel());
        this.tbxLane.setText(String.valueOf(rNode.getLanes()));
        this.tbxEasting.setText(String.valueOf(rNode.getEasting()));
        this.tbxNorthing.setText(String.valueOf(rNode.getNorthing()));
        selectCorridor(rNode.getCorridor());
        selectInfraType(rNode.getInfraType());
        loadDetector(rNode);
    }
    
    private void loadDetector(RNode rNode) {
        DefaultTableModel tm = (DefaultTableModel) this.tblDetectors.getModel();
        
        if(rNode != null){
            Detector[] det = rNode.getDetectors();

            int cnt = 1;
            for(Detector d : det){
                System.out.println(d.getLane()+", "+ d.getLaneType());
                tm.addRow(new Object[]{d.getLane(),d.getId(),d.getLaneType()});
                cnt++;
            }
        }
        addTableRow(tblDetectors,1);
    }

    private void loadInfraType() {
        if(cbxType.getItemCount() == 0){
            cbxType.removeAllItems();
        }
        
        for(InfraType it : InfraType.values()){
            cbxType.addItem(it);
        }
        
        cbxType.setSelectedIndex(1);
    }

    private void loadCorridor() {
        if(cbxCorridor.getItemCount() == 0){
            cbxCorridor.removeAllItems();
        }
        
        for(Corridor co : tmo.getInfra().getCorridors()){
            cbxCorridor.addItem(co);
        }
    }

    private void selectCorridor(Corridor corridor) {
        cbxCorridor.setSelectedItem(corridor);
    }

    private void selectInfraType(InfraType infraType) {
        cbxType.setSelectedItem(infraType);
    }
    
    private void deleteStation() {
        if(rNode == null)
            return;
        
        //delete Detector
        for(Detector d : rNode.getDetectors()){
            deleteDetector(d);
        }
        selectedCorridor.removeRNode(rNode);
        tmo.getInfra().removeInfraObject(rNode);
        tmo.getInfra().reflash(selectedCorridor);
        changeListener.infrachanged();
        dispose();
    }

    private void setNode() {
        InfraType itype = (InfraType)cbxType.getSelectedItem();
        String id=null;
        String sid=null;
        if(itype.isStation()){
            id = createNewRNodeId(adjustIds(tbx_id.getText().trim()));
            sid = createStationId((tbx_id.getText().trim()));
        }
        else
            id = createNewRNodeId(adjustIds(tbxRNode.getText().trim()));
        
        Corridor corridor = (Corridor)cbxCorridor.getSelectedItem();
        String label = tbxLabel.getText();
        int lanes = Integer.parseInt((tbxLane.getText().trim().equals("") ? "0" : tbxLane.getText()));
        int Easting = Integer.parseInt(tbxEasting.getText());
        int Northing = Integer.parseInt(tbxNorthing.getText());
        System.out.println(id+", "+sid);
        rNode = RNode.create(id, sid, label, lanes, Easting, Northing, itype);
        updateDetector(this.tblDetectors,rNode);
        corridor.addRNodeForEditor(rNode);
        rNode.setCorridor(corridor);
        tmo.getInfra().addInfraObject(rNode);
    }

    private void updateNode(InfraObject cobj) {
        if(cobj.getInfraType().isRnode()){
            updateNode((RNode) cobj);
        }
    }
    private void updateNode(RNode rNode) {
        if(rNode.isStation()){
            rNode.setStationId(createStationId(tbx_id.getText().trim()));
        }
        else
            rNode.setId(createRNodeId(adjustIds(tbxRNode.getText().trim())));
        
        rNode.setLabel(tbxLabel.getText());
        rNode.setLanes(Integer.parseInt(tbxLane.getText()));
        rNode.setEasting(Integer.parseInt(tbxEasting.getText()));
        rNode.setNorthing(Integer.parseInt(tbxNorthing.getText()));
        
        updateDetector(this.tblDetectors,rNode);
        
        InfraType itype = (InfraType)this.cbxType.getSelectedItem();
        
        if(!rNode.getInfraType().equals(itype)){
            rNode.setInfraType(itype);
        }
    }
    
    private String createNewRNodeId(String sid){
        return this.RND_NAME + sid;
    }
    private String createStationId(String sid){
            System.out.println("sname :"+StationType.getStationType(sid).getTypeName());
        return StationType.getStationType(sid).getTypeName()+adjustIds(sid);
    }
    private String createRNodeId(String sid) {
        return "rnd_"+sid;
    }
    private String adjustIds(String sid){
        return sid.replaceAll("\\D+", "");
    }
    
    private List<Detector> getAddedDetectors(JTable tblDetectors, RNode rNode) {
        DefaultTableModel rows = (DefaultTableModel)tblDetectors.getModel();
        List<Detector> dets = new ArrayList<Detector>();
        for(int i=0;i<rows.getRowCount();i++){
            String data = "";
            try{
                String s = tblDetectors.getValueAt(i, 1).toString();
                if(!s.equals("") &&
                    rNode.getDetector(s) == null){
                    int num = Integer.parseInt(tblDetectors.getValueAt(i,0).toString());
                    data = s;
                    String lanetype;
                    if(tblDetectors.getValueAt(i, 2) == null)
                            lanetype = LaneType.MAINLINE.suffix;
                    else
                            lanetype = tblDetectors.getValueAt(i, 2).toString();
                    lanetype = LaneType.getbyDesc(lanetype).suffix;
//                    System.out.println("D : "+data);
                    dets.add(new Detector(data,s,"f",lanetype,num));
                }
                
            }catch(Exception e){
                e.printStackTrace();
            }
        }
        return dets;
    }
    private boolean hasDetector(JTable tblDetectors){
        if(!hasDetectorInTable(tblDetectors)){
            JOptionPane.showMessageDialog(rootPane, "There is no Detector in Station Table.\nPlease Check the Table");            
            return false;
        }else
            return true;
    }
    private boolean hasDetectorInTable(JTable tblDetectors){
        DefaultTableModel rows = (DefaultTableModel)tblDetectors.getModel();
        for(int i=0;i<rows.getRowCount();i++){
            try{
                String s = tblDetectors.getValueAt(i, 1).toString();
                if(!s.equals("")){
                    return true;
                }
                
            }catch(Exception e){
                e.printStackTrace();
            }
        }
        return false;
    }

    private void updateDetector(JTable tblDetectors1, RNode rNode) {
        deleteDetectorswithTable(tblDetectors1);
        //Load detectors from Table
        List<Detector> adets = getAddedDetectors(tblDetectors1,rNode);
        
        //set InfraStructure
        for(Detector d : adets){
            tmo.getInfra().addInfraObject(d); 
        }
        
        rNode.addDetectors(adets);
    }

    private void addTableRow(JTable tblDetectors, int cnt) {
        DefaultTableModel tm = (DefaultTableModel) tblDetectors.getModel();
        for(int i=0;i<cnt;i++){
            tm.addRow(new Object[]{"",""});
        }
    }
    
    /**
     * Delete Detector
     * @param d 
     */
    private void deleteDetector(Detector d){
        Detector det = tmo.getInfra().getDetector(d.getId());
        if(det != null){
            tmo.getInfra().removeInfraObject(det);
            rNode.removeDetector(det);
        }
    }
    
    private void deleteDetectorswithTable(JTable tblDetectors){
        DefaultTableModel rows = (DefaultTableModel)tblDetectors.getModel();
        for(Detector d : rNode.getDetectors()){
            boolean isDetector = false;
            for(int i=0;i<rows.getRowCount();i++){
                String s = tblDetectors.getValueAt(i, 1).toString();
                if(!s.equals("") &&
                    d.getId().equals(s)){
                    isDetector = true;
                }
            }
            
            if(!isDetector){
                System.out.println("Delelte : "+d.getId());
                deleteDetector(d);
            }
        }
    }
    
    /**
     * Delete All Detector
     */
    private void deleteAllDetector(){
        for(Detector d : rNode.getDetectors()){
            deleteDetector(d);
        }
    }

    /**
     * delete Table
     * @param tblDetectors 
     */
    private void deleteTable(JTable tblDetectors) {
        int row = tblDetectors.getSelectedRow();
        int col = tblDetectors.getSelectedColumn();
        deleteTableRow(tblDetectors, row);
    }

    /**
     * delete Row Table Data
     * @param tblDetectors
     * @param row 
     */
    private void deleteTableRow(JTable tblDetectors, int row) {
        DefaultTableModel tm = (DefaultTableModel) tblDetectors.getModel();
        tm.removeRow(row);
    }

    /**
     * Detector Table Update Listener
     */
    private void isDetectorSheetUpdate() {
        replaceDetectorNumber();
        CheckDetector();
        updateLanes();
    }

    private void updateLanes() {
        int row = tblDetectors.getRowCount();
        int cnt = 0;
        for(int i=0;i<row;i++){
            String data = tblDetectors.getValueAt(i,1).toString();
            String lname = tblDetectors.getValueAt(i,0).toString();
            if(!data.equals("") && !lname.equals("")){
                cnt ++;
            }
        }
        System.out.println(row+":"+cnt);
        this.tbxLane.setText(String.valueOf(cnt));
    }

    private void CheckDetector() {
        int row = tblDetectors.getSelectedRow();
        int col = tblDetectors.getSelectedColumn();
        DefaultTableModel tm = (DefaultTableModel) tblDetectors.getModel();
        if(row < 0 || col < 0)
            return;
        
        String did = tm.getValueAt(row, 1).toString();
        if(!isNewNode && rNode.hasDetector(did)){
            ReplaceDetector(tm,row,col,did);
        }else if(tmo.getInfra().getDetector(did) != null){
            ReplaceDetector(tm,row,col,did);
        }
        
    }
    
    private void ReplaceDetector(DefaultTableModel tm, int row, int col, String did){
        JOptionPane.showMessageDialog(rootPane, "TICAS already have the same Detector ID : "+did);            
        tm.setValueAt("", row, col);
    }
    
    private void replaceDetectorNumber() {
        int row = tblDetectors.getSelectedRow();
        int col = tblDetectors.getSelectedColumn();
        DefaultTableModel tm = (DefaultTableModel) tblDetectors.getModel();
        if(row < 0 || col < 0)
            return;
        
        String did = tm.getValueAt(row, col).toString();
        System.out.println("Data : "+did);
        if(!StringUtil.isNumber(did) && !DetectorType.isDetectorID(did)){
                JOptionPane.showMessageDialog(rootPane, "Detector ID is incorrect.. : "+did);            
                tm.setValueAt("", row, col);
        }
//        if(!StringUtil.isNumber(did)){
//            tm.setValueAt(adjustIds(did), row, col);
//        }
//        tm.setValueAt(did, row, col);
    }

    /**
     * Check All State
     * @return 
     */
    private boolean CheckState() {
        return checkId() && hasDetector(tblDetectors);
    }

    private boolean checkId() {
        InfraType itype = (InfraType)cbxType.getSelectedItem();
        String tid = adjustIds(tbxRNode.getText().trim());
        String sid = tbx_id.getText().trim();
        /**
         * Check null
         */
        if(!itype.isStation() && (tid == null || tid.equals(""))){
            JOptionPane.showMessageDialog(rootPane, "Empty : RNODE ");            
            return false;
        }else if(itype.isStation() && (sid == null || sid.equals(""))){
            JOptionPane.showMessageDialog(rootPane, "Empty : Station ID ");            
            return false;
        }
        
        
        String rnd;
        if(isNewNode){
                if(itype.isStation())
                    rnd = createNewRNodeId(sid);
                else
                    rnd = createNewRNodeId(tid);
        }else{
            rnd = createRNodeId(tid);
        }
        
        RNode rn = tmo.getInfra().getRNode(rnd);
        
        if(!isNewNode && rn != null && !rNode.getId().equals(rn.getId())){
            JOptionPane.showMessageDialog(rootPane, "TICAS already have the same ID : "+tid);
            return false;
        }else if(isNewNode && rn != null){
            JOptionPane.showMessageDialog(rootPane, "TICAS already have the same ID : "+tid);
            return false;
        }
        
        
        
        if(itype.isStation()){
            rn = tmo.getInfra().getStation(createStationId(sid));

            if(!isNewNode && rn != null && !rNode.getId().equals(rn.getId())){
                JOptionPane.showMessageDialog(rootPane, "TICAS already have the same Station : "+sid);
                return false;
            }else if(isNewNode && rn != null){
                JOptionPane.showMessageDialog(rootPane, "TICAS already have the same Station : "+sid);
                return false;
            }else
                return true;
        }else
            return true;
    }

    private void TypeChanged() {
        InfraType itype = (InfraType)this.cbxType.getSelectedItem();
        if(itype.isStation()){
            this.tbxRNode.setEnabled(false);
            this.tbx_id.setEnabled(true);
        }else{
            this.tbxRNode.setEnabled(true);
            this.tbx_id.setEnabled(false);
        }
    }
    
    public void setSignalListener(InfraDialogChanged signalListener) {
        this.changeListener = signalListener;
    }
}

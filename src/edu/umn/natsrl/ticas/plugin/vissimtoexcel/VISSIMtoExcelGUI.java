/*
 * Copyright (C) 2011 NATSRL @ UMD (University Minnesota Duluth) and
 * Software and System Laboratory @ KNU (Kangwon National University, Korea) 
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package edu.umn.natsrl.ticas.plugin.vissimtoexcel;

import edu.umn.natsrl.ticas.plugin.PluginFrame;
import edu.umn.natsrl.util.FileHelper;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import jxl.Workbook;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author Soobin Jeon <j.soobin@gmail.com>
 */
public class VISSIMtoExcelGUI extends javax.swing.JPanel {

    /**
     * Creates new form VISSIMtoExcelGUI
     */
    public VISSIMtoExcelGUI(PluginFrame parent) {
        initComponents();
        this.txtLocation.setText("F:\\soobinjeon\\Case File\\roundabout\\eveleth\roundabout\\Eveleth.mes");
    }

    /**s
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSearch = new javax.swing.JButton();
        txtLocation = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        btnSearch.setText("Browser");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtLocation.setPreferredSize(new java.awt.Dimension(350, 20));

        jButton1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButton1.setText("Evaluate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(btnSearch)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtLocation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnSearch)
                    .add(txtLocation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton1)
                .addContainerGap(235, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String path = ".";
        String prevPath = this.txtLocation.getText();
        if (!prevPath.isEmpty()) {
            path = new File(prevPath).getAbsolutePath();
        }
        String caseFile = FileHelper.chooseFileToOpen(prevPath, "Select VISSIM Case File", FileHelper.FileFilterForVISSIMDATA);
        if (caseFile != null) {
            this.txtLocation.setText(caseFile);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            startTransfer();
        } catch (Exception ex) {
            Logger.getLogger(VISSIMtoExcelGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton jButton1;
    private javax.swing.JTextField txtLocation;
    // End of variables declaration//GEN-END:variables

    private void startTransfer() throws Exception{
        String source = this.txtLocation.getText();
        
        if(source == null){
            return;
        }
        
        ArrayList<String> contents;
        try {
            contents = FileHelper.readTextFileLines(source);
        } catch (IOException ex) {
            return;
        }
        
        if (contents == null || contents.isEmpty()) {
            return;
        }
        String title = findTitle(contents);
        String exefilename = getFileName(source,title);
        System.out.println(exefilename);
        WritableWorkbook workbook = Workbook.createWorkbook(new File(exefilename));
        System.out.println(title);
        WritableSheet sheet = workbook.createSheet(title, 1);
        int rows = 0;
        rows = addMenu(sheet,contents,rows);
        System.out.println("======Data=======");
        rows = addData(sheet,contents,rows);
        
        workbook.write();
        workbook.close();
    }

    private String findTitle(ArrayList<String> contents) {
        String[] regs = new String[]{"Table of","Data Collection"};
        
        for(String def : contents){
            for(String r : regs){
                if(def.contains(r)){
                    return def;
                }
            }
        }
        
        return null;
    }
    
    private void patternmatch(String contents){
        String regx = "Table of [a-zA-Z] [a-zA-Z]";
        Pattern p = Pattern.compile(regx);
        Matcher matcher = p.matcher(contents);
        while(matcher.find()){
            System.out.println(matcher.groupCount());
            String dname = matcher.group(0).trim();
            if(!dname.isEmpty()){
                System.out.println(dname);
            }
        }
    }
    
    private String getFileName(String fp,String title){
        String[] fs = fp.split("\\\\");
        String[] ffs = fs[fs.length-1].split("\\.");
        if(ffs.length <= 0)
            return "null";
        
        String fullpath="";
        for(int i=0;i<fs.length-1;i++){
            fullpath += fs[i]+"\\";
        }
        if(title == null){
            fullpath += ffs[0]+".xls";
        }
        else{
            fullpath += title+".xls";
        }
        return fullpath;
    }

    private int addMenu(WritableSheet sheet, ArrayList<String> contents,int rows) throws Exception {
        ArrayList<String[]> menus = new ArrayList();
//        String[] menulist = new String[]{"Name","Time"};
        for(String def : contents){
//            for(String mlist : menulist){
                String reg = "^[a-zA-Z.:]*$";
                String[] d = getDatasbyID(reg,def,true);
                if(d != null){
                    menus.add(d);
                }
//            }
        }
        System.out.println(menus.size());
        return addStringData(menus,sheet,rows);
    }

    private int addData(WritableSheet sheet, ArrayList<String> contents, int rows) throws WriteException {
        ArrayList<String[]> datas = new ArrayList();
        String reg = "^[0-9]*$";
        for(String def : contents){
            String[] d = getDatasbyID(reg,def,false);
            if(d != null){
                datas.add(d);
            }
        }
        System.out.println(datas.size());
        return addNumberData(datas,sheet,rows);
    }

    private String[] getDatasbyID(String reg, String data,boolean hasnull) {
        String[] dlist = data.split(";");
        if(dlist.length < 2)
            return null;
        if(!hasnull && dlist[0].trim().length() == 0)
            return null;
        if(dlist[0].trim().matches(reg)){
            String[] relist = new String[dlist.length];
            int cnt = 0;
            for(String dd : dlist){
                relist[cnt] = dd.trim();
//                System.out.println(relist[cnt]);
                cnt++;
            }
            return relist;
        }
        return null;
    }

    private int addStringData(ArrayList<String[]> menus, WritableSheet sheet, int rows) throws Exception{
        for(String[] menu : menus){
            for(int i=0;i<menu.length;i++){
//                System.out.println("menu["+i+"] : "+menu[i]);
                sheet.addCell(new Label(i,rows,menu[i]));
            }
            rows ++;
        }
        return rows;
    }

    private int addNumberData(ArrayList<String[]> datas, WritableSheet sheet, int rows) throws WriteException {
        for(String[] data : datas){
            for(int i=0;i<data.length;i++){
//                System.out.println("data["+i+"] : "+data[i]);
                double d = Double.parseDouble(data[i]);
                sheet.addCell(new Number(i,rows,d));
            }
            rows ++;
        }
        return rows;
    }
}

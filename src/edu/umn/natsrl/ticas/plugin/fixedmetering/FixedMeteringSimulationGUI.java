/*
 * Copyright (C) 2011 NATSRL @ UMD (University Minnesota Duluth) and
 * Software and System Laboratory @ KNU (Kangwon National University, Korea) 
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package edu.umn.natsrl.ticas.plugin.fixedmetering;

import edu.umn.natsrl.evaluation.Interval;
import edu.umn.natsrl.infra.Period;
import edu.umn.natsrl.infra.Section;
import edu.umn.natsrl.infra.TMO;
import edu.umn.natsrl.infra.section.SectionManager;
import edu.umn.natsrl.infra.simobjects.SimMeter;
import edu.umn.natsrl.sfim.SectionInfoDialog;
import edu.umn.natsrl.ticas.Simulation.SimulationUtil;
import edu.umn.natsrl.ticas.plugin.PluginFrame;
import edu.umn.natsrl.ticas.plugin.fixedmetering.FixedSimulation.ISimEndSignal;
import edu.umn.natsrl.util.FileHelper;
import edu.umn.natsrl.vissimcom.ComError;
import edu.umn.natsrl.vissimcom.VISSIMVersion;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Soobin Jeon <j.soobin@gmail.com>
 */
public class FixedMeteringSimulationGUI extends javax.swing.JPanel implements ISimEndSignal{
    private PluginFrame simFrame;
    private TMO tmo = TMO.getInstance();
    private Vector<Section> sections = new Vector<Section>();
    private FixedSimulation sim;
    private Date startTime;
    
    private PrintStream backupOut;
    private PrintStream backupErr;
    
    private boolean startbtn = false;
    private boolean isCaseLoaded = false;
    
    private int lastedInterval = 0;
    /**
     * Creates new form FixedMeteringSimulationGUI
     */
    public FixedMeteringSimulationGUI(PluginFrame parent) {
        initComponents();
        this.simFrame = parent;
        this.loadSection();
        
        // interval
        for (Interval i : Interval.values()) {
            this.cbxInterval.addItem(i);
        }
        
        //VissimVersion
        for(VISSIMVersion v : VISSIMVersion.values()){
            this.cbxvissimVersion.addItem(v);
        }
        
        MeteringConfig.loadConfig();
        this.tbxCaseFile.setText(MeteringConfig.CASE_FILE);
        DecimalFormat df = new DecimalFormat();
        this.tbxRandom.setText(df.format(MeteringConfig.RANDOM_SEED));
        
        isLoaded(false);
        
        ExcelAdapter exap = new ExcelAdapter(this.tbRate);
        
        this.addAncestorListener(new AncestorListener() {
            @Override
            public void ancestorAdded(AncestorEvent event) {}

            @Override
            public void ancestorRemoved(AncestorEvent event) {
                sim.simulationStop();
            }
            @Override
            public void ancestorMoved(AncestorEvent event) {}
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnStart = new javax.swing.JButton();
        tabPanel = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cbxSections = new javax.swing.JComboBox();
        btnSectionInfo = new javax.swing.JButton();
        btnOpenSectionEditor = new javax.swing.JButton();
        tbxCaseFile = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        tbxRandom = new javax.swing.JTextField();
        cbxvissimVersion = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cbxInterval = new javax.swing.JComboBox();
        btnLoadCasefile = new javax.swing.JButton();
        btnDeleteData = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbRate = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbxsetting = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        chkShowVehicles = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbxdebug = new javax.swing.JTextArea();

        btnStart.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnStart.setText("Step 2 : Simulation Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Simulation Parameters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 12))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        jLabel3.setText("Section");

        cbxSections.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        cbxSections.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxSectionsActionPerformed(evt);
            }
        });

        btnSectionInfo.setText("Info");
        btnSectionInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSectionInfoActionPerformed(evt);
            }
        });

        btnOpenSectionEditor.setText("Edit Route");
        btnOpenSectionEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenSectionEditorActionPerformed(evt);
            }
        });

        tbxCaseFile.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        tbxCaseFile.setPreferredSize(new java.awt.Dimension(6, 25));

        btnBrowse.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        btnBrowse.setText("Browse");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        jLabel2.setText("Random Number");

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        jLabel1.setText("Case File");

        tbxRandom.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        tbxRandom.setText("13");
        tbxRandom.setPreferredSize(new java.awt.Dimension(59, 25));

        cbxvissimVersion.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        jLabel6.setText("VISSIM Version");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(btnBrowse)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(tbxCaseFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(cbxSections, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnSectionInfo)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnOpenSectionEditor)))
                    .addComponent(tbxRandom, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxvissimVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(151, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxSections, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSectionInfo)
                    .addComponent(btnOpenSectionEditor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBrowse)
                    .addComponent(tbxCaseFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tbxRandom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxvissimVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel5.setText("Time Interval");

        cbxInterval.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        cbxInterval.setPreferredSize(new java.awt.Dimension(100, 22));
        cbxInterval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxIntervalActionPerformed(evt);
            }
        });

        btnLoadCasefile.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnLoadCasefile.setText("Step1 : Load CaseFile");
        btnLoadCasefile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadCasefileActionPerformed(evt);
            }
        });

        btnDeleteData.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnDeleteData.setText("Delete Data");
        btnDeleteData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDataActionPerformed(evt);
            }
        });

        tbRate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tbRate);

        tbxsetting.setColumns(20);
        tbxsetting.setRows(5);
        jScrollPane3.setViewportView(tbxsetting);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbxInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLoadCasefile, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeleteData))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnLoadCasefile)
                            .addComponent(jLabel5)
                            .addComponent(cbxInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeleteData)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPanel.addTab("Simulation setting", jPanel2);

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
        jLabel4.setText("Option");

        chkShowVehicles.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        chkShowVehicles.setSelected(true);
        chkShowVehicles.setText("show vehicles and road");
        chkShowVehicles.setEnabled(false);
        chkShowVehicles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowVehiclesActionPerformed(evt);
            }
        });

        tbxdebug.setColumns(20);
        tbxdebug.setRows(5);
        jScrollPane1.setViewportView(tbxdebug);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkShowVehicles)
                            .addComponent(jLabel4))
                        .addGap(0, 853, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkShowVehicles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPanel.addTab("Simulation Console", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabPanel)
                    .addComponent(btnStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 724, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbxSectionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSectionsActionPerformed

   }//GEN-LAST:event_cbxSectionsActionPerformed

    private void btnSectionInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSectionInfoActionPerformed
        this.openSectionInfoDialog();
    }//GEN-LAST:event_btnSectionInfoActionPerformed

    private void btnOpenSectionEditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenSectionEditorActionPerformed
        this.openSectionEditor();
    }//GEN-LAST:event_btnOpenSectionEditorActionPerformed

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        String path = ".";
        String prevPath = this.tbxCaseFile.getText();
        if (!prevPath.isEmpty()) {
            path = new File(prevPath).getAbsolutePath();
        }
        String caseFile = FileHelper.chooseFileToOpen(prevPath, "Select VISSIM Case File", FileHelper.FileFilterForVISSIM);
        if (caseFile != null) {
            this.tbxCaseFile.setText(caseFile);
        }
        isLoaded(false);
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void chkShowVehiclesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkShowVehiclesActionPerformed
        setVissimVisible(this.chkShowVehicles.isSelected());
    }//GEN-LAST:event_chkShowVehiclesActionPerformed

    private void btnLoadCasefileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadCasefileActionPerformed
        // TODO add your handling code here:
        loadCasefile();
    }//GEN-LAST:event_btnLoadCasefileActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        // TODO add your handling code here:
        runSimulation();
    }//GEN-LAST:event_btnStartActionPerformed

    private void cbxIntervalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxIntervalActionPerformed
        // TODO add your handling code here:
        this.redirectOutput(tbxsetting);
        if(this.isLoaded())
            LoadTable();
        this.restoreOutput();
    }//GEN-LAST:event_cbxIntervalActionPerformed

    private void btnDeleteDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDataActionPerformed
        // TODO add your handling code here:
        String Filename = FixedMeterGroup.getFileName(MeteringConfig.CASE_FILE);
        File fp = new File(Filename);
        if(fp.isFile()){
            fp.delete();
            this.redirectOutput(tbxsetting);
            System.out.println("Delete complete("+Filename+")");
            this.isLoaded(false);
            this.restoreOutput();
            JOptionPane.showMessageDialog(simFrame, "delete Complete.");
        }else
            JOptionPane.showMessageDialog(simFrame, "There is no File.");
    }//GEN-LAST:event_btnDeleteDataActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnDeleteData;
    private javax.swing.JButton btnLoadCasefile;
    private javax.swing.JButton btnOpenSectionEditor;
    private javax.swing.JButton btnSectionInfo;
    private javax.swing.JButton btnStart;
    private javax.swing.JComboBox cbxInterval;
    private javax.swing.JComboBox cbxSections;
    private javax.swing.JComboBox cbxvissimVersion;
    private javax.swing.JCheckBox chkShowVehicles;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane tabPanel;
    private javax.swing.JTable tbRate;
    private javax.swing.JTextField tbxCaseFile;
    private javax.swing.JTextField tbxRandom;
    private javax.swing.JTextArea tbxdebug;
    private javax.swing.JTextArea tbxsetting;
    // End of variables declaration//GEN-END:variables

    /**
     * Loads section information from TMO
     */
    private void loadSection() {
        SectionManager sm = tmo.getSectionManager();
        this.sections.clear();
        sm.loadSections();
        this.sections.addAll(sm.getSections());

        this.cbxSections.removeAllItems();

        for (Section s : this.sections) {
            this.cbxSections.addItem(s);
        }
    }
    
    /**
     * Open section editor
     */
    public void openSectionEditor() {
        tmo.openSectionEditor(this.simFrame, true);
        this.loadSection();
    }    
    
    /**
     * Open section information dialog
     */
    private void openSectionInfoDialog() {
        Section section = (Section) this.cbxSections.getSelectedItem();
        if (section == null) {
            return;
        }
        SectionInfoDialog si = new SectionInfoDialog(section, null, true);
        si.setLocationRelativeTo(this);
        si.setVisible(true);
    }
    
    private void setVissimVisible(boolean selected) {
        if(sim != null) {
            sim.setVissimVisible(selected);
        }
    }
    
    /**
     * Redirect output into log box
     */
    public void redirectOutput(JTextArea jtarea) {
        backupOut = System.out;
        backupErr = System.err;
        // redirect System.out and System.err to log textbox
        StringOutputStream sos = new StringOutputStream(jtarea);
        System.setOut(new PrintStream(sos));
        System.setErr(new PrintStream(sos));
    }
    
    public void restoreOutput() {
        System.setOut(backupOut);
        System.setErr(backupErr);
    }

    private void runSimulation() {
        try{
            this.redirectOutput(this.tbxdebug);
            isSimulationStart(true);
            System.out.println("Loading Fixed Inerval Data....");
            FixedMeterGroup fmg = SaveCurrentData(lastedInterval);

            startTime = new Date();
            Section section = (Section)this.cbxSections.getSelectedItem();
            sim = new FixedSimulation(MeteringConfig.CASE_FILE,MeteringConfig.RANDOM_SEED,section,(VISSIMVersion)this.cbxvissimVersion.getSelectedItem());
            sim.setSignalListener(this);
            sim.setFixedMeter(fmg.getFixedMeters());
            sim.setVISSIMVersion((VISSIMVersion)this.cbxvissimVersion.getSelectedItem());

            MeteringConfig.RANDOM_SEED = Integer.parseInt(this.tbxRandom.getText());
            sim.setRandomSeed(MeteringConfig.RANDOM_SEED);
            sim.start();
            System.out.println("Start!");
        }catch(Exception ex){
            ex.printStackTrace();
            isSimulationStart(false);
        }
    }
    
    @Override
    public void signalEnd(int code) {
        if(code == -1) {
            this.chkShowVehicles.setEnabled(true);
            this.chkShowVehicles.setSelected(false);            
            setVissimVisible(false);
            return;
        }
        
        ComError ce = ComError.getErrorbyID(code);
        if(!ce.isCorrect()){
            JOptionPane.showMessageDialog(simFrame, ce.toString());
            isSimulationStart(false);
            return;
        }
        
        int samples = sim.getSamples();
        if(samples < 5) {
            JOptionPane.showMessageDialog(simFrame, "Too short simulation");
            simFrame.afterSimulation(null, null);
            this.simFrame.setVisible(false);            
        }
        
        int duration = samples * 30;        

        Calendar c = Calendar.getInstance();
        c.setTime(startTime);
        c.set(Calendar.SECOND, 0);
        Date sTime = c.getTime();
        c.add(Calendar.SECOND, duration);
        Date eTime = c.getTime();
        simFrame.afterSimulation((Section)this.cbxSections.getSelectedItem(), new Period(sTime, eTime, 30));
        SimulationUtil.SaveSimulation((Section)this.cbxSections.getSelectedItem(),new Period(sTime, eTime, 30),simFrame);
        System.out.println("Restore output redirection ... ");
        isSimulationStart(false);
        this.restoreOutput();
    }

    private void loadCasefile() {
        this.redirectOutput(tbxsetting);
        MeteringConfig.CASE_FILE = this.tbxCaseFile.getText();
        MeteringConfig.RANDOM_SEED = Integer.parseInt(this.tbxRandom.getText());
        MeteringConfig.saveConfig();
        
        Section section = (Section)this.cbxSections.getSelectedItem();
        sim = new FixedSimulation(MeteringConfig.CASE_FILE,MeteringConfig.RANDOM_SEED,section,(VISSIMVersion)this.cbxvissimVersion.getSelectedItem());
        for(SimMeter m : sim.getSimMeter()){
            System.out.print(m.getMeter().getLabel()+"  - ");
            for(String mid : m.getMeterID())
                System.out.print(", "+mid);
            System.out.println();
        }
        LoadTable();
        isLoaded(true);        
        this.restoreOutput();
    }
    
    /**
     * Save CurrentData
     * @param second
     * @return 
     */
    private FixedMeterGroup SaveCurrentData(int second){
        ArrayList<SimMeter> simMeters = sim.getSimMeter();
        ArrayList<FixedMeter> fmeters = new ArrayList<FixedMeter>();
        int idx=0;
        for(SimMeter smeter : simMeters){
            FixedMeter fmeter = LoadTableData(idx,smeter,second);
            fmeters.add(fmeter);
            idx++;
        }
        FixedMeterGroup fmg = new FixedMeterGroup(MeteringConfig.CASE_FILE,fmeters,second);
        fmg.Save();
        
        System.out.println("Data Saved(Interval-"+second+")");
        return fmg;
    }
    
    /**
     * Load TableData
     * @param idx
     * @param smeter
     * @return 
     */
    private FixedMeter LoadTableData(int idx, SimMeter smeter, int timeInterval) {
        int index = idx+1;
        FixedMeter meter = new FixedMeter(smeter,timeInterval);
        DefaultTableModel rows = (DefaultTableModel)tbRate.getModel();
        
        if(!rows.getColumnName(index).contains(smeter.getId())){
            for(int i=0;i<rows.getColumnCount();i++){
                if(rows.getColumnName(i).contains(smeter.getId()))
                    index = i;
            }
        }
//        System.out.println(index+", "+smeter.getId());
        for(int i=0;i<rows.getRowCount();i++){
            double data = 0;
            try{
                String s = tbRate.getValueAt(i, index).toString();
                data = Double.parseDouble(s);
            }catch(Exception e){
                data = 0;
            }
//            System.out.println(data);
            meter.AddRate(data);
        }
        return meter;
    }

    /**
     * set Table Data
     * @param fmg
     * @param interval 
     */
    private void setTable(FixedMeterGroup fmg, int interval) {
        ArrayList<SimMeter> meters;
        if(fmg == null)
            meters = sim.getSimMeter();
        else
            meters = fmg.getSimMeters();
        
        String[] columns = new String[meters.size()+1];
        columns[0] = "Time";
        for(int i=0;i<meters.size();i++){
            columns[i+1] = meters.get(i).getMeter().getLabel()+"("+meters.get(i).getId()+")";
        }
        
        DefaultTableModel tmodel = new DefaultTableModel();
        tmodel.setColumnIdentifiers(columns);
        tbRate.setModel(tmodel);
        
        int totalrows = sim.getDuration() / interval;
        totalrows = totalrows < 1 ? 1 : totalrows;
        
        DefaultTableModel rows = (DefaultTableModel)tbRate.getModel();
        for(int i=0;i<totalrows;i++){
            int timeinterval = (i)*interval;
            Vector<Double> data = new Vector<Double>();
            
            //Add interval
            data.add((double)timeinterval);
            
            //Add Data
            if(fmg != null){
                for(FixedMeter fmeter : fmg.getFixedMeters()){
                    if(i < fmeter.rate.size())
                        data.add(fmeter.rate.get(i));
                }
            }
            rows.addRow(data);
        }
        
        tbRate.getModel().addTableModelListener(new TableModelListener(){
            @Override
            public void tableChanged(TableModelEvent e) {
                if(tbRate.isEditing()){
                    String data = tbRate.getValueAt(tbRate.getEditingRow(), tbRate.getEditingColumn()).toString();
                    try{
                        double d = Double.parseDouble(data);
                    }catch(Exception error){
                        JOptionPane.showMessageDialog(simFrame, "Wrong data");
                        tbRate.setValueAt(0, tbRate.getEditingRow(), tbRate.getEditingColumn());
                    }
                    System.out.println(data);
                }
            }
            
        });
    }

    /**
     * Load Table from data
     */
    private void LoadTable() {
        if(isLoaded())
            SaveCurrentData(lastedInterval);
        
        Interval itv = (Interval)this.cbxInterval.getSelectedItem();
        lastedInterval = itv.second;
        
        ArrayList<SimMeter> simMeters = sim.getSimMeter();

        FixedMeterGroup fmg = FixedMeterGroup.load(MeteringConfig.CASE_FILE,itv.second,simMeters);
        
        System.out.println(fmg.errortype.toString());
        if(fmg.errortype.isNOT_LOADED())
            setTable(null,itv.second);
        else if(fmg.errortype.isSUCCESS())
            setTable(fmg,itv.second);
        else{
            JOptionPane.showMessageDialog(simFrame, fmg.errortype.toString());
            return;
        }
    }
    
    private void startBtnCheck(){
        startBtnCheck(startbtn);
    }
    private void startBtnCheck(boolean sbtn){
        startbtn = sbtn;
        this.btnStart.setEnabled(startbtn);
    }

    private void isLoaded(boolean b) {
        isCaseLoaded = b;
        startBtnCheck(isCaseLoaded);
        if(b)
            this.btnLoadCasefile.setEnabled(false);
        else
            this.btnLoadCasefile.setEnabled(true);
    }
    private boolean isLoaded(){
        return isCaseLoaded;
    }
    
    private void isSimulationStart(boolean en){
        boolean setr;
        if(en == true){
            tabPanel.setSelectedIndex(1);
            setr = false;
        }
        else{
            tabPanel.setSelectedIndex(0);
            setr = true;
        }
        startBtnCheck(setr);
        btnLoadCasefile.setEnabled(setr);
        btnDeleteData.setEnabled(setr);
        tbRate.setEnabled(setr);
        cbxInterval.setEnabled(setr);
    }

    
    
    
    /**
     * String Output Stream class for output redirection
     */
    public class StringOutputStream extends OutputStream {
        JTextArea logText;

        public StringOutputStream(JTextArea logText) {
            this.logText = logText;
        }
        
        @Override
        public void write(int b) throws IOException {
            updateLog(String.valueOf((char) b));
        }

        @Override
        public void write(byte[] b, int off, int len) throws IOException {
            updateLog(new String(b, off, len));
        }

        @Override
        public void write(byte[] b) throws IOException {
            write(b, 0, b.length);
        }

        private synchronized void updateLog(final String text) {
            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    logText.append(text);
                }
            });
        }
    }
}

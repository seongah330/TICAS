/*
 * Copyright (C) 2011 NATSRL @ UMD (University Minnesota Duluth) and
 * Software and System Laboratory @ KNU (Kangwon National University, Korea) 
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package edu.umn.natsrl.ticas.plugin.srtedataextractor;

import edu.umn.natsrl.evaluation.Evaluation;
import edu.umn.natsrl.evaluation.EvaluationOption;
import edu.umn.natsrl.evaluation.EvaluationResult;
import edu.umn.natsrl.evaluation.Interval;
import edu.umn.natsrl.evaluation.OptionType;
import edu.umn.natsrl.evaluation.OutputDirection;
import edu.umn.natsrl.evaluation.StationSpeed;
import edu.umn.natsrl.infra.InfraConstants;
import edu.umn.natsrl.infra.Period;
import edu.umn.natsrl.infra.Section;
import edu.umn.natsrl.infra.TMO;
import edu.umn.natsrl.infra.infraobjects.Detector;
import edu.umn.natsrl.infra.interfaces.IDetectorChecker;
import edu.umn.natsrl.infra.section.SectionManager;
import edu.umn.natsrl.ticas.DateChecker;
import edu.umn.natsrl.ticas.TICASOption;
import edu.umn.natsrl.ticas.plugin.PluginFrame;
import edu.umn.natsrl.ticas.plugin.srte.SRTEMainPanel;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Calendar;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;

/**
 *
 * @author Soobin Jeon <j.soobin@gmail.com>
 */
public class SRTEDataExtractorPanel extends javax.swing.JPanel {

        private TMO tmo = TMO.getInstance();
        private Vector<Section> sections = new Vector<Section>();
        private PrintStream backupOut;
        private PrintStream backupErr;
        private boolean isDeleteTime = false;
        /**
         * Creates new form SRTEDataExtractorPanel
         */
        public SRTEDataExtractorPanel(PluginFrame simFrame) {
                initComponents();
                simFrame.setSize(740, 540);
                init();
        }

        /**
         * This method is called from within the constructor to initialize the
         * form. WARNING: Do NOT modify this code. The content of this method is
         * always regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                jPanel1 = new javax.swing.JPanel();
                natsrlCalendar = new edu.umn.natsrl.gadget.calendar.NATSRLCalendar();
                jLabel17 = new javax.swing.JLabel();
                cbxInterval = new javax.swing.JComboBox();
                jLabel18 = new javax.swing.JLabel();
                cbxStartHour = new javax.swing.JComboBox();
                jLabel14 = new javax.swing.JLabel();
                cbxStartMin = new javax.swing.JComboBox();
                jLabel20 = new javax.swing.JLabel();
                cbxEndHour = new javax.swing.JComboBox();
                jLabel15 = new javax.swing.JLabel();
                cbxEndMin = new javax.swing.JComboBox();
                jLabel6 = new javax.swing.JLabel();
                cbxDuration = new javax.swing.JComboBox();
                jLabel5 = new javax.swing.JLabel();
                jLabel3 = new javax.swing.JLabel();
                cbxSections = new javax.swing.JComboBox();
                Evaluation = new javax.swing.JButton();
                jLabel1 = new javax.swing.JLabel();
                jScrollPane1 = new javax.swing.JScrollPane();
                jTextArea1 = new javax.swing.JTextArea();
                pnDeleteTime = new javax.swing.JPanel();
                cbxDEndMin = new javax.swing.JComboBox();
                jLabel21 = new javax.swing.JLabel();
                cbxDEndHour = new javax.swing.JComboBox();
                jLabel22 = new javax.swing.JLabel();
                jLabel19 = new javax.swing.JLabel();
                jLabel16 = new javax.swing.JLabel();
                cbxDStartMin = new javax.swing.JComboBox();
                cbxDStartHour = new javax.swing.JComboBox();
                cbxDeleteTime = new javax.swing.JCheckBox();

                jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Date and Time", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 0, 12))); // NOI18N

                jLabel17.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                jLabel17.setText("Time Interval");

                cbxInterval.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N

                jLabel18.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                jLabel18.setText("Start Time");

                cbxStartHour.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                cbxStartHour.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));
                cbxStartHour.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                cbxStartHourActionPerformed(evt);
                        }
                });

                jLabel14.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                jLabel14.setText(":");

                cbxStartMin.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                cbxStartMin.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

                jLabel20.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                jLabel20.setText("End Time");

                cbxEndHour.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                cbxEndHour.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24" }));
                cbxEndHour.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                cbxEndHourActionPerformed(evt);
                        }
                });

                jLabel15.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                jLabel15.setText(":");

                cbxEndMin.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                cbxEndMin.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

                jLabel6.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                jLabel6.setText("hour");

                cbxDuration.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                cbxDuration.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                cbxDurationActionPerformed(evt);
                        }
                });

                jLabel5.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                jLabel5.setText("for");

                jLabel3.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                jLabel3.setText("or");

                javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
                jPanel1.setLayout(jPanel1Layout);
                jPanel1Layout.setHorizontalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addGap(21, 21, 21)
                                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                .addComponent(jLabel18)
                                                                .addComponent(jLabel20))
                                                        .addGap(18, 18, 18)
                                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                .addComponent(cbxEndHour, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(cbxStartHour, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(jLabel15)
                                                                        .addGap(1, 1, 1)
                                                                        .addComponent(cbxEndMin, 0, 1, Short.MAX_VALUE))
                                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                                        .addGap(2, 2, 2)
                                                                        .addComponent(jLabel14)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(cbxStartMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(jLabel17)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(cbxInterval, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                        .addContainerGap()
                                                        .addComponent(jLabel3)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(jLabel5)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(cbxDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(jLabel6)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(natsrlCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );
                jPanel1Layout.setVerticalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(natsrlCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel17)
                                        .addComponent(cbxInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel18)
                                                        .addComponent(cbxStartHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel20)
                                                        .addComponent(cbxEndHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel15)
                                                        .addComponent(cbxEndMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel14)
                                                .addComponent(cbxStartMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel5)
                                        .addComponent(cbxDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel6))
                                .addContainerGap(19, Short.MAX_VALUE))
                );

                cbxSections.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
                cbxSections.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                cbxSectionsActionPerformed(evt);
                        }
                });

                Evaluation.setText("Evaluation");
                Evaluation.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                EvaluationActionPerformed(evt);
                        }
                });

                jLabel1.setText("Section");

                jTextArea1.setColumns(20);
                jTextArea1.setRows(5);
                jScrollPane1.setViewportView(jTextArea1);

                pnDeleteTime.setBorder(javax.swing.BorderFactory.createTitledBorder("delete Time"));

                cbxDEndMin.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                cbxDEndMin.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
                cbxDEndMin.setEnabled(false);

                jLabel21.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                jLabel21.setText(":");

                cbxDEndHour.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                cbxDEndHour.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24" }));
                cbxDEndHour.setEnabled(false);
                cbxDEndHour.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                cbxDEndHourActionPerformed(evt);
                        }
                });

                jLabel22.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                jLabel22.setText("End Time");

                jLabel19.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                jLabel19.setText("Start Time");

                jLabel16.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                jLabel16.setText(":");

                cbxDStartMin.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                cbxDStartMin.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
                cbxDStartMin.setEnabled(false);

                cbxDStartHour.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
                cbxDStartHour.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));
                cbxDStartHour.setEnabled(false);
                cbxDStartHour.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                cbxDStartHourActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout pnDeleteTimeLayout = new javax.swing.GroupLayout(pnDeleteTime);
                pnDeleteTime.setLayout(pnDeleteTimeLayout);
                pnDeleteTimeLayout.setHorizontalGroup(
                        pnDeleteTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnDeleteTimeLayout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(pnDeleteTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel19)
                                        .addComponent(jLabel22))
                                .addGap(18, 18, 18)
                                .addGroup(pnDeleteTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(cbxDEndHour, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cbxDStartHour, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(pnDeleteTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pnDeleteTimeLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel21)
                                                .addGap(1, 1, 1)
                                                .addComponent(cbxDEndMin, 0, 1, Short.MAX_VALUE))
                                        .addGroup(pnDeleteTimeLayout.createSequentialGroup()
                                                .addGap(2, 2, 2)
                                                .addComponent(jLabel16)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cbxDStartMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(37, 37, 37))
                );
                pnDeleteTimeLayout.setVerticalGroup(
                        pnDeleteTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnDeleteTimeLayout.createSequentialGroup()
                                .addGroup(pnDeleteTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pnDeleteTimeLayout.createSequentialGroup()
                                                .addGroup(pnDeleteTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel19)
                                                        .addComponent(cbxDStartHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(pnDeleteTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel22)
                                                        .addComponent(cbxDEndHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel21)
                                                        .addComponent(cbxDEndMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(pnDeleteTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel16)
                                                .addComponent(cbxDStartMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(22, Short.MAX_VALUE))
                );

                cbxDeleteTime.setText("Delete Time");
                cbxDeleteTime.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                cbxDeleteTimeActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(pnDeleteTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(cbxDeleteTime))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel1)
                                                        .addComponent(cbxSections, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Evaluation, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 51, Short.MAX_VALUE))
                                        .addComponent(jScrollPane1))
                                .addContainerGap())
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel1)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(cbxSections, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(Evaluation, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane1))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(cbxDeleteTime)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(pnDeleteTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
                );
        }// </editor-fold>//GEN-END:initComponents

        private void cbxStartHourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxStartHourActionPerformed
                int slt1 = this.cbxStartHour.getSelectedIndex();
                int slt2 = this.cbxEndHour.getSelectedIndex();
                if (slt1 > slt2) {
                        this.cbxEndHour.setSelectedIndex(slt1);
                }
        }//GEN-LAST:event_cbxStartHourActionPerformed

        private void cbxEndHourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxEndHourActionPerformed
                int slt1 = this.cbxStartHour.getSelectedIndex();
                int slt2 = this.cbxEndHour.getSelectedIndex();
                if (slt1 > slt2) {
                        this.cbxStartHour.setSelectedIndex(slt2);
                }
        }//GEN-LAST:event_cbxEndHourActionPerformed

        private void cbxSectionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSectionsActionPerformed
                
        }//GEN-LAST:event_cbxSectionsActionPerformed

        private void EvaluationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EvaluationActionPerformed
                // TODO add your handling code here:
                evalData();
        }//GEN-LAST:event_EvaluationActionPerformed

        private void cbxDStartHourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxDStartHourActionPerformed
                // TODO add your handling code here:
        }//GEN-LAST:event_cbxDStartHourActionPerformed

        private void cbxDEndHourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxDEndHourActionPerformed
                // TODO add your handling code here:
        }//GEN-LAST:event_cbxDEndHourActionPerformed

        private void cbxDeleteTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxDeleteTimeActionPerformed
                // TODO add your handling code here:
                isDeleteTime = this.cbxDeleteTime.isSelected();
                enableDeleteTime(isDeleteTime);
        }//GEN-LAST:event_cbxDeleteTimeActionPerformed

        private void cbxDurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxDurationActionPerformed
                selectDuration();
        }//GEN-LAST:event_cbxDurationActionPerformed

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton Evaluation;
        private javax.swing.JComboBox cbxDEndHour;
        private javax.swing.JComboBox cbxDEndMin;
        private javax.swing.JComboBox cbxDStartHour;
        private javax.swing.JComboBox cbxDStartMin;
        private javax.swing.JCheckBox cbxDeleteTime;
        private javax.swing.JComboBox cbxDuration;
        private javax.swing.JComboBox cbxEndHour;
        private javax.swing.JComboBox cbxEndMin;
        private javax.swing.JComboBox cbxInterval;
        private javax.swing.JComboBox cbxSections;
        private javax.swing.JComboBox cbxStartHour;
        private javax.swing.JComboBox cbxStartMin;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabel14;
        private javax.swing.JLabel jLabel15;
        private javax.swing.JLabel jLabel16;
        private javax.swing.JLabel jLabel17;
        private javax.swing.JLabel jLabel18;
        private javax.swing.JLabel jLabel19;
        private javax.swing.JLabel jLabel20;
        private javax.swing.JLabel jLabel21;
        private javax.swing.JLabel jLabel22;
        private javax.swing.JLabel jLabel3;
        private javax.swing.JLabel jLabel5;
        private javax.swing.JLabel jLabel6;
        private javax.swing.JPanel jPanel1;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JTextArea jTextArea1;
        private edu.umn.natsrl.gadget.calendar.NATSRLCalendar natsrlCalendar;
        private javax.swing.JPanel pnDeleteTime;
        // End of variables declaration//GEN-END:variables

        private void init() {
                //data check
                DateChecker dc = DateChecker.getInstance();
                this.natsrlCalendar.setDateChecker(dc);
                
                //interval
                // interval
                for (Interval i : Interval.values()) {
                        this.cbxInterval.addItem(i);
                }
                
                loadSection();
                cbxInterval.setSelectedIndex(6);
                
                // duration
                this.cbxDuration.addItem("Select");
                for (int i = 1; i <= 32; i++) {
                    this.cbxDuration.addItem(i);
                }
        }
        
        /**
     * Loads section information from TMO
     */
    private void loadSection() {
        SectionManager sm = tmo.getSectionManager();
        if(sm == null) return;
        this.sections.clear();
        sm.loadSections();
        this.sections.addAll(sm.getSections());
        this.cbxSections.removeAllItems();
        this.cbxSections.addItem("Select the route");
        for (Section s : this.sections) {
            this.cbxSections.addItem(s);
        }        
    }
    
    private Section getSelectedSection()
    {
        Object so = this.cbxSections.getSelectedItem();
        if(so instanceof Section) {
            return (Section)this.cbxSections.getSelectedItem();            
        } else return null;
    }
    
    private TICASOption getOption() {
    
        TICASOption ticasOption = new TICASOption();
        EvaluationOption opt = ticasOption.getEvaluationOption();

        // all checkbox options
//        for (EvaluationCheckBox c : EvaluationCheckBox.getCheckBoxes("TICAS")) {
//            if (c.isSelected()) {
//                opt.addOption(c.getOption());
//            }
//        }
       
        
        // section
        
            Section section = this.getSelectedSection();

            if (section == null) {
                JOptionPane.showMessageDialog(null, "Select section at first");
                return null;
            }
            opt.setSection(section);
        
        
        // interval
        opt.setInterval((Interval) this.cbxInterval.getSelectedItem());

        // output path
//        ticasOption.setOutputPath(this.tbxOutputFolder.getText());

        // output direction
        opt.setOutputDirection(OutputDirection.TO_RIGHT);

        // period
        Calendar[] selectedDates = this.natsrlCalendar.getSelectedDates();
        Calendar c1, c2;
        Period period;
        int interval = ((Interval) this.cbxInterval.getSelectedItem()).getSecond();
        int start_hour = Integer.parseInt(this.cbxStartHour.getSelectedItem().toString());
        int start_min = Integer.parseInt(this.cbxStartMin.getSelectedItem().toString());
        int end_hour = Integer.parseInt(this.cbxEndHour.getSelectedItem().toString());
        int end_min = Integer.parseInt(this.cbxEndMin.getSelectedItem().toString());

        // set hour and min
        opt.setStartEndTime(start_hour, start_min, end_hour, end_min);
        
        for (Calendar date : selectedDates) {
            c1 = (Calendar) date.clone();
            c2 = (Calendar) date.clone();

            c1.set(Calendar.HOUR, start_hour);
            c1.set(Calendar.MINUTE, start_min);

                if (this.cbxDuration.getSelectedIndex() > 0) {
                        ticasOption.setDuration((Integer) this.cbxDuration.getSelectedItem());
                        c2.set(Calendar.HOUR, start_hour);
                        c2.set(Calendar.MINUTE, start_min);
                        c2.add(Calendar.HOUR, (Integer) this.cbxDuration.getSelectedItem());
                } else {
                        c2.set(Calendar.HOUR, end_hour);
                        c2.set(Calendar.MINUTE, end_min);
                }

            period = new Period(c1.getTime(), c2.getTime(), interval);
            opt.addPeriod(period);
        }

        // selected section
        ticasOption.setSelectedSectionIndex(this.cbxSections.getSelectedIndex());
        
        // selected interval
        ticasOption.setSelectedIntervalIndex(this.cbxInterval.getSelectedIndex());
        
        // url settings
        ticasOption.setTrafficConfigUrl(InfraConstants.TRAFFIC_CONFIG_URL);
        ticasOption.setTrafficDataUrl(InfraConstants.TRAFFIC_DATA_URL);
        ticasOption.getEvaluationOption().addOption(OptionType.FIXING_MISSING_DATA);
        final boolean withoutHOV = true;
        final boolean withoutWavetronics = true;
        final boolean onlyHOV = false;
        final boolean withoutAux = false;

        // detector checker
        opt.setDetectChecker(new IDetectorChecker() {
            @Override
            public boolean check(Detector d) {
                if(onlyHOV && !d.isHov()) return false; 
                if(withoutHOV && d.isHov()) return false;
                if(withoutAux && d.isAuxiliary()) return false;                
                if(withoutWavetronics && d.isWavetronics()) return false;
                if(d.isAbandoned()) return false;
                return true;
            }
        });
        
        return ticasOption;
    }
    
        private SRTEOption getSRTEOption(){
                TICASOption topt = getOption();
                Period[] p = topt.getEvaluationOption().getPeriods();
                if(p == null)
                        return null;
                SRTEOption srteoption = new SRTEOption(p[0]);
            
                int start_hour = Integer.parseInt(this.cbxDStartHour.getSelectedItem().toString());
                int start_min = Integer.parseInt(this.cbxDStartMin.getSelectedItem().toString());
                int end_hour = Integer.parseInt(this.cbxDEndHour.getSelectedItem().toString());
                int end_min = Integer.parseInt(this.cbxDEndMin.getSelectedItem().toString());
                srteoption.isDeleteTime(this.isDeleteTime);
                srteoption.setDeleteTime(start_hour, start_min, end_hour, end_min);

                return srteoption;
        }

        private void evalData() {
                TICASOption option = getOption();
                SRTEextractor ex = new SRTEextractor(option, getSRTEOption());
                SRTEextractor.AlogorithmEndListener cb = new SRTEextractor.AlogorithmEndListener() {

                        @Override
                        public void onEndMessage(boolean msg) {
                                setEndMessage(msg);
                        }
                };
                redirectOutput();
                ex.setEndListener(cb);
                Evaluation.setEnabled(false);
                ex.start();
        }
        
        private void setEndMessage(boolean msg){
                if(msg){
                        Evaluation.setEnabled(true);
                        System.out.println("Finish");
                        this.restoreOutput();
                }
        }
        
        /**
     * Redirect output into log box
     */
    public void redirectOutput() {
        backupOut = System.out;
        backupErr = System.err;
        //reset Area
        jTextArea1.setText("");
        // redirect System.out and System.err to log textbox
        StringOutputStream sos = new StringOutputStream(this.jTextArea1);
        System.setOut(new PrintStream(sos));
        System.setErr(new PrintStream(sos));
    }

    /**
     * Resotre output
     */
    public void restoreOutput() {
        if(backupOut == null)
            return;
        System.setOut(backupOut);
        System.setErr(backupErr);
    }

        private void enableDeleteTime(boolean b) {
                this.cbxDEndHour.setEnabled(b);
                this.cbxDEndMin.setEnabled(b);
                this.cbxDStartHour.setEnabled(b);
                this.cbxDStartMin.setEnabled(b);
        }

        /**
     * Change times status according to selected duration
     */
    private void selectDuration() {
        if (this.cbxDuration.getSelectedIndex() == 0) {
            this.cbxEndHour.setEnabled(true);
            this.cbxEndMin.setEnabled(true);
        } else {
            this.cbxEndHour.setEnabled(false);
            this.cbxEndMin.setEnabled(false);
        }
    }
    
    /**
     * String Output Stream class for output redirection
     */
    public class StringOutputStream extends OutputStream {
        JTextArea logText;

        public StringOutputStream(JTextArea logText) {
            this.logText = logText;
        }
        
        @Override
        public void write(int b) throws IOException {
            updateLog(String.valueOf((char) b));
        }

        @Override
        public void write(byte[] b, int off, int len) throws IOException {
            updateLog(new String(b, off, len));
        }

        @Override
        public void write(byte[] b) throws IOException {
            write(b, 0, b.length);
        }

        private synchronized void updateLog(final String text) {
            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    logText.append(text);
                }
            });
        }
    }
}
